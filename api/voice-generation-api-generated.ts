/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost } from '../models';
// @ts-ignore
import { BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { VoiceGenerationParameterResponseModel } from '../models';
// @ts-ignore
import { VoiceResponseModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VoiceGenerationApi - axios parameter creator
 * @export
 */
export const VoiceGenerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a previously generated voice. This endpoint should be called after you fetched a generated_voice_id using /v1/voice-generation/generate-voice.
         * @summary Create A Previously Generated Voice
         * @param {BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost} bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoice: async (bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost: BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost' is not null or undefined
            assertParamExists('createVoice', 'bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost', bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost)
            const localVarPath = `/v1/voice-generation/create-voice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voice-generation/create-voice',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a random voice based on parameters. This method returns a generated_voice_id in the response header, and a sample of the voice in the body. If you like the generated voice call /v1/voice-generation/create-voice with the generated_voice_id to create the voice.
         * @summary Generate A Random Voice
         * @param {BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost} bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRandomVoice: async (bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost: BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost' is not null or undefined
            assertParamExists('generateRandomVoice', 'bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost', bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost)
            const localVarPath = `/v1/voice-generation/generate-voice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voice-generation/generate-voice',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get possible parameters for the /v1/voice-generation/generate-voice endpoint.
         * @summary Voice Generation Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceGenerationParameters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voice-generation/generate-voice/parameters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voice-generation/generate-voice/parameters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoiceGenerationApi - functional programming interface
 * @export
 */
export const VoiceGenerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoiceGenerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a previously generated voice. This endpoint should be called after you fetched a generated_voice_id using /v1/voice-generation/generate-voice.
         * @summary Create A Previously Generated Voice
         * @param {VoiceGenerationApiCreateVoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVoice(requestParameters: VoiceGenerationApiCreateVoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceResponseModel>> {
            const bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost: BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost = {
                voice_name: requestParameters.voice_name,
                voice_description: requestParameters.voice_description,
                generated_voice_id: requestParameters.generated_voice_id,
                labels: requestParameters.labels
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVoice(bodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a random voice based on parameters. This method returns a generated_voice_id in the response header, and a sample of the voice in the body. If you like the generated voice call /v1/voice-generation/create-voice with the generated_voice_id to create the voice.
         * @summary Generate A Random Voice
         * @param {VoiceGenerationApiGenerateRandomVoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRandomVoice(requestParameters: VoiceGenerationApiGenerateRandomVoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost: BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost = {
                gender: requestParameters.gender,
                accent: requestParameters.accent,
                age: requestParameters.age,
                accent_strength: requestParameters.accent_strength,
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateRandomVoice(bodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get possible parameters for the /v1/voice-generation/generate-voice endpoint.
         * @summary Voice Generation Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoiceGenerationParameters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceGenerationParameterResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoiceGenerationParameters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoiceGenerationApi - factory interface
 * @export
 */
export const VoiceGenerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoiceGenerationApiFp(configuration)
    return {
        /**
         * Create a previously generated voice. This endpoint should be called after you fetched a generated_voice_id using /v1/voice-generation/generate-voice.
         * @summary Create A Previously Generated Voice
         * @param {VoiceGenerationApiCreateVoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoice(requestParameters: VoiceGenerationApiCreateVoiceRequest, options?: AxiosRequestConfig): AxiosPromise<VoiceResponseModel> {
            return localVarFp.createVoice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a random voice based on parameters. This method returns a generated_voice_id in the response header, and a sample of the voice in the body. If you like the generated voice call /v1/voice-generation/create-voice with the generated_voice_id to create the voice.
         * @summary Generate A Random Voice
         * @param {VoiceGenerationApiGenerateRandomVoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRandomVoice(requestParameters: VoiceGenerationApiGenerateRandomVoiceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateRandomVoice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get possible parameters for the /v1/voice-generation/generate-voice endpoint.
         * @summary Voice Generation Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceGenerationParameters(options?: AxiosRequestConfig): AxiosPromise<VoiceGenerationParameterResponseModel> {
            return localVarFp.getVoiceGenerationParameters(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVoice operation in VoiceGenerationApi.
 * @export
 * @interface VoiceGenerationApiCreateVoiceRequest
 */
export type VoiceGenerationApiCreateVoiceRequest = {
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoiceGenerationApiCreateVoice
    */
    readonly xiApiKey?: string
    
} & BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost

/**
 * Request parameters for generateRandomVoice operation in VoiceGenerationApi.
 * @export
 * @interface VoiceGenerationApiGenerateRandomVoiceRequest
 */
export type VoiceGenerationApiGenerateRandomVoiceRequest = {
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoiceGenerationApiGenerateRandomVoice
    */
    readonly xiApiKey?: string
    
} & BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost

/**
 * VoiceGenerationApiGenerated - object-oriented interface
 * @export
 * @class VoiceGenerationApiGenerated
 * @extends {BaseAPI}
 */
export class VoiceGenerationApiGenerated extends BaseAPI {
    /**
     * Create a previously generated voice. This endpoint should be called after you fetched a generated_voice_id using /v1/voice-generation/generate-voice.
     * @summary Create A Previously Generated Voice
     * @param {VoiceGenerationApiCreateVoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceGenerationApiGenerated
     */
    public createVoice(requestParameters: VoiceGenerationApiCreateVoiceRequest, options?: AxiosRequestConfig) {
        return VoiceGenerationApiFp(this.configuration).createVoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a random voice based on parameters. This method returns a generated_voice_id in the response header, and a sample of the voice in the body. If you like the generated voice call /v1/voice-generation/create-voice with the generated_voice_id to create the voice.
     * @summary Generate A Random Voice
     * @param {VoiceGenerationApiGenerateRandomVoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceGenerationApiGenerated
     */
    public generateRandomVoice(requestParameters: VoiceGenerationApiGenerateRandomVoiceRequest, options?: AxiosRequestConfig) {
        return VoiceGenerationApiFp(this.configuration).generateRandomVoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get possible parameters for the /v1/voice-generation/generate-voice endpoint.
     * @summary Voice Generation Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceGenerationApiGenerated
     */
    public getVoiceGenerationParameters(options?: AxiosRequestConfig) {
        return VoiceGenerationApiFp(this.configuration).getVoiceGenerationParameters(options).then((request) => request(this.axios, this.basePath));
    }
}
