/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyDownloadHistoryItemsV1HistoryDownloadPost } from '../models';
// @ts-ignore
import { GetSpeechHistoryResponseModel } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SpeechHistoryItemResponseModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SpeechHistoryApi - axios parameter creator
 * @export
 */
export const SpeechHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a history item by its ID
         * @summary Delete History Item
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoryItemById: async (historyItemId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyItemId' is not null or undefined
            assertParamExists('deleteHistoryItemById', 'historyItemId', historyItemId)
            const localVarPath = `/v1/history/{history_item_id}`
                .replace(`{${"history_item_id"}}`, encodeURIComponent(String(historyItemId !== undefined ? historyItemId : `-history_item_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/history/{history_item_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
         * @summary Download History Items
         * @param {BodyDownloadHistoryItemsV1HistoryDownloadPost} bodyDownloadHistoryItemsV1HistoryDownloadPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadHistoryItems: async (bodyDownloadHistoryItemsV1HistoryDownloadPost: BodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyDownloadHistoryItemsV1HistoryDownloadPost' is not null or undefined
            assertParamExists('downloadHistoryItems', 'bodyDownloadHistoryItemsV1HistoryDownloadPost', bodyDownloadHistoryItemsV1HistoryDownloadPost)
            const localVarPath = `/v1/history/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bodyDownloadHistoryItemsV1HistoryDownloadPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/history/download',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDownloadHistoryItemsV1HistoryDownloadPost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about all your generated audio.
         * @summary Get Generated Items
         * @param {number} [pageSize] How many history items to return at maximum. Can not exceed 1000, defaults to 100.
         * @param {string} [startAfterHistoryItemId] After which ID to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date.
         * @param {string} [voiceId] Voice ID to be filtered for, you can use GET https://api.elevenlabs.io/v1/voices to receive a list of voices and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneratedAudioMetadata: async (pageSize?: number, startAfterHistoryItemId?: string, voiceId?: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (startAfterHistoryItemId !== undefined) {
                localVarQueryParameter['start_after_history_item_id'] = startAfterHistoryItemId;
            }

            if (voiceId !== undefined) {
                localVarQueryParameter['voice_id'] = voiceId;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the audio of an history item.
         * @summary Get Audio From History Item
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryItemAudio: async (historyItemId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyItemId' is not null or undefined
            assertParamExists('getHistoryItemAudio', 'historyItemId', historyItemId)
            const localVarPath = `/v1/history/{history_item_id}/audio`
                .replace(`{${"history_item_id"}}`, encodeURIComponent(String(historyItemId !== undefined ? historyItemId : `-history_item_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/history/{history_item_id}/audio',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about an history item by its ID.
         * @summary Get History Item By Id
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryItemById: async (historyItemId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyItemId' is not null or undefined
            assertParamExists('getHistoryItemById', 'historyItemId', historyItemId)
            const localVarPath = `/v1/history/{history_item_id}`
                .replace(`{${"history_item_id"}}`, encodeURIComponent(String(historyItemId !== undefined ? historyItemId : `-history_item_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/history/{history_item_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpeechHistoryApi - functional programming interface
 * @export
 */
export const SpeechHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpeechHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a history item by its ID
         * @summary Delete History Item
         * @param {SpeechHistoryApiDeleteHistoryItemByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoryItemById(requestParameters: SpeechHistoryApiDeleteHistoryItemByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHistoryItemById(requestParameters.historyItemId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
         * @summary Download History Items
         * @param {SpeechHistoryApiDownloadHistoryItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadHistoryItems(requestParameters: SpeechHistoryApiDownloadHistoryItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const bodyDownloadHistoryItemsV1HistoryDownloadPost: BodyDownloadHistoryItemsV1HistoryDownloadPost = {
                history_item_ids: requestParameters.history_item_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadHistoryItems(bodyDownloadHistoryItemsV1HistoryDownloadPost, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about all your generated audio.
         * @summary Get Generated Items
         * @param {SpeechHistoryApiGetGeneratedAudioMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneratedAudioMetadata(requestParameters: SpeechHistoryApiGetGeneratedAudioMetadataRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSpeechHistoryResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGeneratedAudioMetadata(requestParameters.pageSize, requestParameters.startAfterHistoryItemId, requestParameters.voiceId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the audio of an history item.
         * @summary Get Audio From History Item
         * @param {SpeechHistoryApiGetHistoryItemAudioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryItemAudio(requestParameters: SpeechHistoryApiGetHistoryItemAudioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoryItemAudio(requestParameters.historyItemId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about an history item by its ID.
         * @summary Get History Item By Id
         * @param {SpeechHistoryApiGetHistoryItemByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryItemById(requestParameters: SpeechHistoryApiGetHistoryItemByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpeechHistoryItemResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoryItemById(requestParameters.historyItemId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpeechHistoryApi - factory interface
 * @export
 */
export const SpeechHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpeechHistoryApiFp(configuration)
    return {
        /**
         * Delete a history item by its ID
         * @summary Delete History Item
         * @param {SpeechHistoryApiDeleteHistoryItemByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoryItemById(requestParameters: SpeechHistoryApiDeleteHistoryItemByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteHistoryItemById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
         * @summary Download History Items
         * @param {SpeechHistoryApiDownloadHistoryItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadHistoryItems(requestParameters: SpeechHistoryApiDownloadHistoryItemsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadHistoryItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about all your generated audio.
         * @summary Get Generated Items
         * @param {SpeechHistoryApiGetGeneratedAudioMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneratedAudioMetadata(requestParameters: SpeechHistoryApiGetGeneratedAudioMetadataRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetSpeechHistoryResponseModel> {
            return localVarFp.getGeneratedAudioMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the audio of an history item.
         * @summary Get Audio From History Item
         * @param {SpeechHistoryApiGetHistoryItemAudioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryItemAudio(requestParameters: SpeechHistoryApiGetHistoryItemAudioRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getHistoryItemAudio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about an history item by its ID.
         * @summary Get History Item By Id
         * @param {SpeechHistoryApiGetHistoryItemByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryItemById(requestParameters: SpeechHistoryApiGetHistoryItemByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SpeechHistoryItemResponseModel> {
            return localVarFp.getHistoryItemById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteHistoryItemById operation in SpeechHistoryApi.
 * @export
 * @interface SpeechHistoryApiDeleteHistoryItemByIdRequest
 */
export type SpeechHistoryApiDeleteHistoryItemByIdRequest = {
    
    /**
    * History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
    * @type {string}
    * @memberof SpeechHistoryApiDeleteHistoryItemById
    */
    readonly historyItemId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SpeechHistoryApiDeleteHistoryItemById
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for downloadHistoryItems operation in SpeechHistoryApi.
 * @export
 * @interface SpeechHistoryApiDownloadHistoryItemsRequest
 */
export type SpeechHistoryApiDownloadHistoryItemsRequest = {
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SpeechHistoryApiDownloadHistoryItems
    */
    readonly xiApiKey?: string
    
} & BodyDownloadHistoryItemsV1HistoryDownloadPost

/**
 * Request parameters for getGeneratedAudioMetadata operation in SpeechHistoryApi.
 * @export
 * @interface SpeechHistoryApiGetGeneratedAudioMetadataRequest
 */
export type SpeechHistoryApiGetGeneratedAudioMetadataRequest = {
    
    /**
    * How many history items to return at maximum. Can not exceed 1000, defaults to 100.
    * @type {number}
    * @memberof SpeechHistoryApiGetGeneratedAudioMetadata
    */
    readonly pageSize?: number
    
    /**
    * After which ID to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date.
    * @type {string}
    * @memberof SpeechHistoryApiGetGeneratedAudioMetadata
    */
    readonly startAfterHistoryItemId?: string
    
    /**
    * Voice ID to be filtered for, you can use GET https://api.elevenlabs.io/v1/voices to receive a list of voices and their IDs.
    * @type {string}
    * @memberof SpeechHistoryApiGetGeneratedAudioMetadata
    */
    readonly voiceId?: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SpeechHistoryApiGetGeneratedAudioMetadata
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getHistoryItemAudio operation in SpeechHistoryApi.
 * @export
 * @interface SpeechHistoryApiGetHistoryItemAudioRequest
 */
export type SpeechHistoryApiGetHistoryItemAudioRequest = {
    
    /**
    * History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
    * @type {string}
    * @memberof SpeechHistoryApiGetHistoryItemAudio
    */
    readonly historyItemId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SpeechHistoryApiGetHistoryItemAudio
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getHistoryItemById operation in SpeechHistoryApi.
 * @export
 * @interface SpeechHistoryApiGetHistoryItemByIdRequest
 */
export type SpeechHistoryApiGetHistoryItemByIdRequest = {
    
    /**
    * History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
    * @type {string}
    * @memberof SpeechHistoryApiGetHistoryItemById
    */
    readonly historyItemId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SpeechHistoryApiGetHistoryItemById
    */
    readonly xiApiKey?: string
    
}

/**
 * SpeechHistoryApiGenerated - object-oriented interface
 * @export
 * @class SpeechHistoryApiGenerated
 * @extends {BaseAPI}
 */
export class SpeechHistoryApiGenerated extends BaseAPI {
    /**
     * Delete a history item by its ID
     * @summary Delete History Item
     * @param {SpeechHistoryApiDeleteHistoryItemByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeechHistoryApiGenerated
     */
    public deleteHistoryItemById(requestParameters: SpeechHistoryApiDeleteHistoryItemByIdRequest, options?: AxiosRequestConfig) {
        return SpeechHistoryApiFp(this.configuration).deleteHistoryItemById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
     * @summary Download History Items
     * @param {SpeechHistoryApiDownloadHistoryItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeechHistoryApiGenerated
     */
    public downloadHistoryItems(requestParameters: SpeechHistoryApiDownloadHistoryItemsRequest, options?: AxiosRequestConfig) {
        return SpeechHistoryApiFp(this.configuration).downloadHistoryItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about all your generated audio.
     * @summary Get Generated Items
     * @param {SpeechHistoryApiGetGeneratedAudioMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeechHistoryApiGenerated
     */
    public getGeneratedAudioMetadata(requestParameters: SpeechHistoryApiGetGeneratedAudioMetadataRequest = {}, options?: AxiosRequestConfig) {
        return SpeechHistoryApiFp(this.configuration).getGeneratedAudioMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the audio of an history item.
     * @summary Get Audio From History Item
     * @param {SpeechHistoryApiGetHistoryItemAudioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeechHistoryApiGenerated
     */
    public getHistoryItemAudio(requestParameters: SpeechHistoryApiGetHistoryItemAudioRequest, options?: AxiosRequestConfig) {
        return SpeechHistoryApiFp(this.configuration).getHistoryItemAudio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about an history item by its ID.
     * @summary Get History Item By Id
     * @param {SpeechHistoryApiGetHistoryItemByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeechHistoryApiGenerated
     */
    public getHistoryItemById(requestParameters: SpeechHistoryApiGetHistoryItemByIdRequest, options?: AxiosRequestConfig) {
        return SpeechHistoryApiFp(this.configuration).getHistoryItemById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
