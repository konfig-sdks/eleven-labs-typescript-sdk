/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddProjectResponseModel } from '../models';
// @ts-ignore
import { BodyAddProjectV1ProjectsAddPost } from '../models';
// @ts-ignore
import { BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost } from '../models';
// @ts-ignore
import { ChapterResponseModel } from '../models';
// @ts-ignore
import { ChapterSnapshotsResponseModel } from '../models';
// @ts-ignore
import { GetChaptersResponseModel } from '../models';
// @ts-ignore
import { GetProjectsResponseModel } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { ProjectExtendedResponseModel } from '../models';
// @ts-ignore
import { ProjectSnapshotsResponseModel } from '../models';
// @ts-ignore
import { PronunciationDictionaryVersionLocatorDBModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new project, it can be either initialized as blank, from a document or from a URL.
         * @summary Add Project
         * @param {string} name The name of the project, used for identification only.
         * @param {string} defaultTitleVoiceId The voice_id that corresponds to the default voice used for new titles.
         * @param {string} defaultParagraphVoiceId The voice_id that corresponds to the default voice used for new paragraphs.
         * @param {string} defaultModelId The model_id of the model to be used for this project, you can query GET https://api.elevenlabs.io/v1/models to list all available models.
         * @param {Array<string>} pronunciationDictionaryLocators A list of pronunciation dictionary locators (id, version_id) encoded as a list of JSON strings for pronunciation dictionaries to be applied to the text.  A list of json encoded strings is required as adding projects may occur through formData as opposed to jsonBody
         * @param {BodyAddProjectV1ProjectsAddPost} bodyAddProjectV1ProjectsAddPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [title] An optional name of the author of the project, this will be added as metadata to the mp3 file on project / chapter download.
         * @param {string} [fromUrl] An optional URL from which we will extract content to initialize the project. If this is set, \\\&#39;from_url\\\&#39; must be null. If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
         * @param {Uint8Array | File | buffer.File} [fromDocument] An optional .epub, .pdf, .txt or similar file can be provided. If provided, we will initialize the project with its content. If this is set, \\\&#39;from_url\\\&#39; must be null.  If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
         * @param {string} [qualityPreset] Output quality of the generated audio. Must be one of: standard - standard output format, 128kbps with 44.1kHz sample rate. high - high quality output format, 192kbps with 44.1kHz sample rate and major improvements on our side. Using this setting increases the character cost by 20%. ultra - ultra quality output format, 192kbps with 44.1kHz sample rate and highest improvements on our side. Using this setting increases the character cost by 50%. 
         * @param {string} [author] An optional name of the author of the project, this will be added as metadata to the mp3 file on project / chapter download.
         * @param {string} [isbnNumber] An optional ISBN number of the project you want to create, this will be added as metadata to the mp3 file on project / chapter download.
         * @param {boolean} [acxVolumeNormalization] [Deprecated] When the project is downloaded, should the returned audio have postprocessing in order to make it compliant with audiobook normalized volume requirements
         * @param {boolean} [volumeNormalization] When the project is downloaded, should the returned audio have postprocessing in order to make it compliant with audiobook normalized volume requirements
         * @param {string} [callbackUrl] A url that will be called by our service when the project is converted with a json containing the status of the conversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProject: async (name: string, defaultTitleVoiceId: string, defaultParagraphVoiceId: string, defaultModelId: string, pronunciationDictionaryLocators: Array<string>, bodyAddProjectV1ProjectsAddPost: BodyAddProjectV1ProjectsAddPost, xiApiKey?: string, title?: string, fromUrl?: string, fromDocument?: Uint8Array | File | buffer.File, qualityPreset?: string, author?: string, isbnNumber?: string, acxVolumeNormalization?: boolean, volumeNormalization?: boolean, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createNewProject', 'name', name)
            // verify required parameter 'defaultTitleVoiceId' is not null or undefined
            assertParamExists('createNewProject', 'defaultTitleVoiceId', defaultTitleVoiceId)
            // verify required parameter 'defaultParagraphVoiceId' is not null or undefined
            assertParamExists('createNewProject', 'defaultParagraphVoiceId', defaultParagraphVoiceId)
            // verify required parameter 'defaultModelId' is not null or undefined
            assertParamExists('createNewProject', 'defaultModelId', defaultModelId)
            // verify required parameter 'pronunciationDictionaryLocators' is not null or undefined
            assertParamExists('createNewProject', 'pronunciationDictionaryLocators', pronunciationDictionaryLocators)
            // verify required parameter 'bodyAddProjectV1ProjectsAddPost' is not null or undefined
            assertParamExists('createNewProject', 'bodyAddProjectV1ProjectsAddPost', bodyAddProjectV1ProjectsAddPost)
            const localVarPath = `/v1/projects/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (title !== undefined) {
                await addFormParam('title', title, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (fromUrl !== undefined) {
                await addFormParam('from_url', fromUrl, false, true)
            }
    
            if (fromDocument !== undefined) {
                await addFormParam('from_document', fromDocument, true, true)
            }
    
            if (defaultTitleVoiceId !== undefined) {
                await addFormParam('default_title_voice_id', defaultTitleVoiceId, false, true)
            }
    
            if (defaultParagraphVoiceId !== undefined) {
                await addFormParam('default_paragraph_voice_id', defaultParagraphVoiceId, false, true)
            }
    
            if (defaultModelId !== undefined) {
                await addFormParam('default_model_id', defaultModelId, false, true)
            }
    
            if (qualityPreset !== undefined) {
                await addFormParam('quality_preset', qualityPreset, false, true)
            }
    
            if (author !== undefined) {
                await addFormParam('author', author, false, true)
            }
    
            if (isbnNumber !== undefined) {
                await addFormParam('isbn_number', isbnNumber, false, true)
            }
    
            if (acxVolumeNormalization !== undefined) {
                await addFormParam('acx_volume_normalization', acxVolumeNormalization, false, true)
            }
    
            if (volumeNormalization !== undefined) {
                await addFormParam('volume_normalization', volumeNormalization, false, true)
            }
            if (pronunciationDictionaryLocators) {
            localVarFormParams.append('pronunciation_dictionary_locators', pronunciationDictionaryLocators.join(COLLECTION_FORMATS.csv));
            }

    
            if (callbackUrl !== undefined) {
                await addFormParam('callback_url', callbackUrl, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyAddProjectV1ProjectsAddPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project by its project_id.
         * @summary Delete Project
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteById', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a chapter by its chapter_id.
         * @summary Delete Chapter
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapterById: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteChapterById', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('deleteChapterById', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/chapters/{chapter_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your projects together and its metadata.
         * @summary Get Projects
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
         * @summary Get Project By Id
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getById', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a specific chapter.
         * @summary Get Chapter By Id
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterById: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getChapterById', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getChapterById', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/chapters/{chapter_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
         * @summary Get Chapter Snapshots
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterSnapshots: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getChapterSnapshots', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getChapterSnapshots', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}/snapshots`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/chapters/{chapter_id}/snapshots',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your chapters for a project together and its metadata.
         * @summary Get Chapters
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChapters: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listChapters', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/chapters`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/chapters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the snapshots of a project.
         * @summary Get Project Snapshots
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSnapshots: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listSnapshots', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/snapshots`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/snapshots',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts conversion of a specific chapter.
         * @summary Convert Chapter
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startChapterConversion: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('startChapterConversion', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('startChapterConversion', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}/convert`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/chapters/{chapter_id}/convert',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts conversion of a project and all of its chapters.
         * @summary Convert Project
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversion: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('startConversion', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/convert`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/convert',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream the audio from a project snapshot.
         * @summary Stream Project Audio
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} projectSnapshotId The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamAudioFromSnapshot: async (projectId: string, projectSnapshotId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamAudioFromSnapshot', 'projectId', projectId)
            // verify required parameter 'projectSnapshotId' is not null or undefined
            assertParamExists('streamAudioFromSnapshot', 'projectSnapshotId', projectSnapshotId)
            const localVarPath = `/v1/projects/{project_id}/snapshots/{project_snapshot_id}/stream`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"project_snapshot_id"}}`, encodeURIComponent(String(projectSnapshotId !== undefined ? projectSnapshotId : `-project_snapshot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/snapshots/{project_snapshot_id}/stream',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
         * @summary Stream Chapter Audio
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} chapterSnapshotId The chapter_snapshot_id of the chapter snapshot. You can query GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to the all available snapshots for a chapter.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamAudioFromSnapshotPost: async (projectId: string, chapterId: string, chapterSnapshotId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamAudioFromSnapshotPost', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('streamAudioFromSnapshotPost', 'chapterId', chapterId)
            // verify required parameter 'chapterSnapshotId' is not null or undefined
            assertParamExists('streamAudioFromSnapshotPost', 'chapterSnapshotId', chapterSnapshotId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}/snapshots/{chapter_snapshot_id}/stream`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"chapter_snapshot_id"}}`, encodeURIComponent(String(chapterSnapshotId !== undefined ? chapterSnapshotId : `-chapter_snapshot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/chapters/{chapter_id}/snapshots/{chapter_snapshot_id}/stream',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
         * @summary Update Pronunciation Dictionaries
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost} bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePronunciationDictionaries: async (projectId: string, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost: BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updatePronunciationDictionaries', 'projectId', projectId)
            // verify required parameter 'bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost' is not null or undefined
            assertParamExists('updatePronunciationDictionaries', 'bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost', bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost)
            const localVarPath = `/v1/projects/{project_id}/update-pronunciation-dictionaries`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/projects/{project_id}/update-pronunciation-dictionaries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new project, it can be either initialized as blank, from a document or from a URL.
         * @summary Add Project
         * @param {ProjectsApiCreateNewProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewProject(requestParameters: ProjectsApiCreateNewProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddProjectResponseModel>> {
            const bodyAddProjectV1ProjectsAddPost: BodyAddProjectV1ProjectsAddPost = {
                title: requestParameters.title,
                name: requestParameters.name,
                from_url: requestParameters.from_url,
                from_document: requestParameters.from_document,
                default_title_voice_id: requestParameters.default_title_voice_id,
                default_paragraph_voice_id: requestParameters.default_paragraph_voice_id,
                default_model_id: requestParameters.default_model_id,
                quality_preset: requestParameters.quality_preset,
                author: requestParameters.author,
                isbn_number: requestParameters.isbn_number,
                acx_volume_normalization: requestParameters.acx_volume_normalization,
                volume_normalization: requestParameters.volume_normalization,
                pronunciation_dictionary_locators: requestParameters.pronunciation_dictionary_locators,
                callback_url: requestParameters.callback_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewProject(requestParameters.name, requestParameters.defaultTitleVoiceId, requestParameters.defaultParagraphVoiceId, requestParameters.defaultModelId, requestParameters.pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, requestParameters.xiApiKey, requestParameters.title, requestParameters.fromUrl, requestParameters.fromDocument, requestParameters.qualityPreset, requestParameters.author, requestParameters.isbnNumber, requestParameters.acxVolumeNormalization, requestParameters.volumeNormalization, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a project by its project_id.
         * @summary Delete Project
         * @param {ProjectsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ProjectsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.projectId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a chapter by its chapter_id.
         * @summary Delete Chapter
         * @param {ProjectsApiDeleteChapterByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapterById(requestParameters: ProjectsApiDeleteChapterByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapterById(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your projects together and its metadata.
         * @summary Get Projects
         * @param {ProjectsApiGetAllProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjects(requestParameters: ProjectsApiGetAllProjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjects(requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
         * @summary Get Project By Id
         * @param {ProjectsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ProjectsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectExtendedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.projectId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a specific chapter.
         * @summary Get Chapter By Id
         * @param {ProjectsApiGetChapterByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterById(requestParameters: ProjectsApiGetChapterByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterById(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
         * @summary Get Chapter Snapshots
         * @param {ProjectsApiGetChapterSnapshotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterSnapshots(requestParameters: ProjectsApiGetChapterSnapshotsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterSnapshotsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterSnapshots(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your chapters for a project together and its metadata.
         * @summary Get Chapters
         * @param {ProjectsApiListChaptersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChapters(requestParameters: ProjectsApiListChaptersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChaptersResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChapters(requestParameters.projectId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the snapshots of a project.
         * @summary Get Project Snapshots
         * @param {ProjectsApiListSnapshotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSnapshots(requestParameters: ProjectsApiListSnapshotsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSnapshotsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSnapshots(requestParameters.projectId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts conversion of a specific chapter.
         * @summary Convert Chapter
         * @param {ProjectsApiStartChapterConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startChapterConversion(requestParameters: ProjectsApiStartChapterConversionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startChapterConversion(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts conversion of a project and all of its chapters.
         * @summary Convert Project
         * @param {ProjectsApiStartConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startConversion(requestParameters: ProjectsApiStartConversionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startConversion(requestParameters.projectId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stream the audio from a project snapshot.
         * @summary Stream Project Audio
         * @param {ProjectsApiStreamAudioFromSnapshotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamAudioFromSnapshot(requestParameters: ProjectsApiStreamAudioFromSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamAudioFromSnapshot(requestParameters.projectId, requestParameters.projectSnapshotId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
         * @summary Stream Chapter Audio
         * @param {ProjectsApiStreamAudioFromSnapshotPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamAudioFromSnapshotPost(requestParameters: ProjectsApiStreamAudioFromSnapshotPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamAudioFromSnapshotPost(requestParameters.projectId, requestParameters.chapterId, requestParameters.chapterSnapshotId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
         * @summary Update Pronunciation Dictionaries
         * @param {ProjectsApiUpdatePronunciationDictionariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePronunciationDictionaries(requestParameters: ProjectsApiUpdatePronunciationDictionariesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost: BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost = {
                pronunciation_dictionary_locators: requestParameters.pronunciation_dictionary_locators
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePronunciationDictionaries(requestParameters.projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * Creates a new project, it can be either initialized as blank, from a document or from a URL.
         * @summary Add Project
         * @param {ProjectsApiCreateNewProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProject(requestParameters: ProjectsApiCreateNewProjectRequest, options?: AxiosRequestConfig): AxiosPromise<AddProjectResponseModel> {
            return localVarFp.createNewProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project by its project_id.
         * @summary Delete Project
         * @param {ProjectsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ProjectsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a chapter by its chapter_id.
         * @summary Delete Chapter
         * @param {ProjectsApiDeleteChapterByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapterById(requestParameters: ProjectsApiDeleteChapterByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteChapterById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your projects together and its metadata.
         * @summary Get Projects
         * @param {ProjectsApiGetAllProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(requestParameters: ProjectsApiGetAllProjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetProjectsResponseModel> {
            return localVarFp.getAllProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
         * @summary Get Project By Id
         * @param {ProjectsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ProjectsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectExtendedResponseModel> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a specific chapter.
         * @summary Get Chapter By Id
         * @param {ProjectsApiGetChapterByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterById(requestParameters: ProjectsApiGetChapterByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ChapterResponseModel> {
            return localVarFp.getChapterById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
         * @summary Get Chapter Snapshots
         * @param {ProjectsApiGetChapterSnapshotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterSnapshots(requestParameters: ProjectsApiGetChapterSnapshotsRequest, options?: AxiosRequestConfig): AxiosPromise<ChapterSnapshotsResponseModel> {
            return localVarFp.getChapterSnapshots(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your chapters for a project together and its metadata.
         * @summary Get Chapters
         * @param {ProjectsApiListChaptersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChapters(requestParameters: ProjectsApiListChaptersRequest, options?: AxiosRequestConfig): AxiosPromise<GetChaptersResponseModel> {
            return localVarFp.listChapters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the snapshots of a project.
         * @summary Get Project Snapshots
         * @param {ProjectsApiListSnapshotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSnapshots(requestParameters: ProjectsApiListSnapshotsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectSnapshotsResponseModel> {
            return localVarFp.listSnapshots(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts conversion of a specific chapter.
         * @summary Convert Chapter
         * @param {ProjectsApiStartChapterConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startChapterConversion(requestParameters: ProjectsApiStartChapterConversionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.startChapterConversion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts conversion of a project and all of its chapters.
         * @summary Convert Project
         * @param {ProjectsApiStartConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversion(requestParameters: ProjectsApiStartConversionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.startConversion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Stream the audio from a project snapshot.
         * @summary Stream Project Audio
         * @param {ProjectsApiStreamAudioFromSnapshotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamAudioFromSnapshot(requestParameters: ProjectsApiStreamAudioFromSnapshotRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.streamAudioFromSnapshot(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
         * @summary Stream Chapter Audio
         * @param {ProjectsApiStreamAudioFromSnapshotPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamAudioFromSnapshotPost(requestParameters: ProjectsApiStreamAudioFromSnapshotPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.streamAudioFromSnapshotPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
         * @summary Update Pronunciation Dictionaries
         * @param {ProjectsApiUpdatePronunciationDictionariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePronunciationDictionaries(requestParameters: ProjectsApiUpdatePronunciationDictionariesRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updatePronunciationDictionaries(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateNewProjectRequest
 */
export type ProjectsApiCreateNewProjectRequest = {
    
    /**
    * The name of the project, used for identification only.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly name: string
    
    /**
    * The voice_id that corresponds to the default voice used for new titles.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly defaultTitleVoiceId: string
    
    /**
    * The voice_id that corresponds to the default voice used for new paragraphs.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly defaultParagraphVoiceId: string
    
    /**
    * The model_id of the model to be used for this project, you can query GET https://api.elevenlabs.io/v1/models to list all available models.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly defaultModelId: string
    
    /**
    * A list of pronunciation dictionary locators (id, version_id) encoded as a list of JSON strings for pronunciation dictionaries to be applied to the text.  A list of json encoded strings is required as adding projects may occur through formData as opposed to jsonBody
    * @type {Array<string>}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly pronunciationDictionaryLocators: Array<string>
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly xiApiKey?: string
    
    /**
    * An optional name of the author of the project, this will be added as metadata to the mp3 file on project / chapter download.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly title?: string
    
    /**
    * An optional URL from which we will extract content to initialize the project. If this is set, \\\'from_url\\\' must be null. If neither \\\'from_url\\\' or \\\'from_document\\\' are provided we will initialize the project as blank.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly fromUrl?: string
    
    /**
    * An optional .epub, .pdf, .txt or similar file can be provided. If provided, we will initialize the project with its content. If this is set, \\\'from_url\\\' must be null.  If neither \\\'from_url\\\' or \\\'from_document\\\' are provided we will initialize the project as blank.
    * @type {Uint8Array | File | buffer.File}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly fromDocument?: Uint8Array | File | buffer.File
    
    /**
    * Output quality of the generated audio. Must be one of: standard - standard output format, 128kbps with 44.1kHz sample rate. high - high quality output format, 192kbps with 44.1kHz sample rate and major improvements on our side. Using this setting increases the character cost by 20%. ultra - ultra quality output format, 192kbps with 44.1kHz sample rate and highest improvements on our side. Using this setting increases the character cost by 50%. 
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly qualityPreset?: string
    
    /**
    * An optional name of the author of the project, this will be added as metadata to the mp3 file on project / chapter download.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly author?: string
    
    /**
    * An optional ISBN number of the project you want to create, this will be added as metadata to the mp3 file on project / chapter download.
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly isbnNumber?: string
    
    /**
    * [Deprecated] When the project is downloaded, should the returned audio have postprocessing in order to make it compliant with audiobook normalized volume requirements
    * @type {boolean}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly acxVolumeNormalization?: boolean
    
    /**
    * When the project is downloaded, should the returned audio have postprocessing in order to make it compliant with audiobook normalized volume requirements
    * @type {boolean}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly volumeNormalization?: boolean
    
    /**
    * A url that will be called by our service when the project is converted with a json containing the status of the conversion
    * @type {string}
    * @memberof ProjectsApiCreateNewProject
    */
    readonly callbackUrl?: string
    
} & BodyAddProjectV1ProjectsAddPost

/**
 * Request parameters for deleteById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteByIdRequest
 */
export type ProjectsApiDeleteByIdRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiDeleteById
    */
    readonly projectId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiDeleteById
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for deleteChapterById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteChapterByIdRequest
 */
export type ProjectsApiDeleteChapterByIdRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiDeleteChapterById
    */
    readonly projectId: string
    
    /**
    * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
    * @type {string}
    * @memberof ProjectsApiDeleteChapterById
    */
    readonly chapterId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiDeleteChapterById
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getAllProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetAllProjectsRequest
 */
export type ProjectsApiGetAllProjectsRequest = {
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiGetAllProjects
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetByIdRequest
 */
export type ProjectsApiGetByIdRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiGetById
    */
    readonly projectId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiGetById
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getChapterById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetChapterByIdRequest
 */
export type ProjectsApiGetChapterByIdRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiGetChapterById
    */
    readonly projectId: string
    
    /**
    * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
    * @type {string}
    * @memberof ProjectsApiGetChapterById
    */
    readonly chapterId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiGetChapterById
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getChapterSnapshots operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetChapterSnapshotsRequest
 */
export type ProjectsApiGetChapterSnapshotsRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiGetChapterSnapshots
    */
    readonly projectId: string
    
    /**
    * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
    * @type {string}
    * @memberof ProjectsApiGetChapterSnapshots
    */
    readonly chapterId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiGetChapterSnapshots
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for listChapters operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListChaptersRequest
 */
export type ProjectsApiListChaptersRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiListChapters
    */
    readonly projectId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiListChapters
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for listSnapshots operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListSnapshotsRequest
 */
export type ProjectsApiListSnapshotsRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiListSnapshots
    */
    readonly projectId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiListSnapshots
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for startChapterConversion operation in ProjectsApi.
 * @export
 * @interface ProjectsApiStartChapterConversionRequest
 */
export type ProjectsApiStartChapterConversionRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiStartChapterConversion
    */
    readonly projectId: string
    
    /**
    * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
    * @type {string}
    * @memberof ProjectsApiStartChapterConversion
    */
    readonly chapterId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiStartChapterConversion
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for startConversion operation in ProjectsApi.
 * @export
 * @interface ProjectsApiStartConversionRequest
 */
export type ProjectsApiStartConversionRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiStartConversion
    */
    readonly projectId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiStartConversion
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for streamAudioFromSnapshot operation in ProjectsApi.
 * @export
 * @interface ProjectsApiStreamAudioFromSnapshotRequest
 */
export type ProjectsApiStreamAudioFromSnapshotRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshot
    */
    readonly projectId: string
    
    /**
    * The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshot
    */
    readonly projectSnapshotId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshot
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for streamAudioFromSnapshotPost operation in ProjectsApi.
 * @export
 * @interface ProjectsApiStreamAudioFromSnapshotPostRequest
 */
export type ProjectsApiStreamAudioFromSnapshotPostRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshotPost
    */
    readonly projectId: string
    
    /**
    * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshotPost
    */
    readonly chapterId: string
    
    /**
    * The chapter_snapshot_id of the chapter snapshot. You can query GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to the all available snapshots for a chapter.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshotPost
    */
    readonly chapterSnapshotId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiStreamAudioFromSnapshotPost
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for updatePronunciationDictionaries operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdatePronunciationDictionariesRequest
 */
export type ProjectsApiUpdatePronunciationDictionariesRequest = {
    
    /**
    * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
    * @type {string}
    * @memberof ProjectsApiUpdatePronunciationDictionaries
    */
    readonly projectId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof ProjectsApiUpdatePronunciationDictionaries
    */
    readonly xiApiKey?: string
    
} & BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost

/**
 * ProjectsApiGenerated - object-oriented interface
 * @export
 * @class ProjectsApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectsApiGenerated extends BaseAPI {
    /**
     * Creates a new project, it can be either initialized as blank, from a document or from a URL.
     * @summary Add Project
     * @param {ProjectsApiCreateNewProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createNewProject(requestParameters: ProjectsApiCreateNewProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createNewProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project by its project_id.
     * @summary Delete Project
     * @param {ProjectsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public deleteById(requestParameters: ProjectsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a chapter by its chapter_id.
     * @summary Delete Chapter
     * @param {ProjectsApiDeleteChapterByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public deleteChapterById(requestParameters: ProjectsApiDeleteChapterByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteChapterById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of your projects together and its metadata.
     * @summary Get Projects
     * @param {ProjectsApiGetAllProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getAllProjects(requestParameters: ProjectsApiGetAllProjectsRequest = {}, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getAllProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
     * @summary Get Project By Id
     * @param {ProjectsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getById(requestParameters: ProjectsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a specific chapter.
     * @summary Get Chapter By Id
     * @param {ProjectsApiGetChapterByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getChapterById(requestParameters: ProjectsApiGetChapterByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getChapterById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
     * @summary Get Chapter Snapshots
     * @param {ProjectsApiGetChapterSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getChapterSnapshots(requestParameters: ProjectsApiGetChapterSnapshotsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getChapterSnapshots(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of your chapters for a project together and its metadata.
     * @summary Get Chapters
     * @param {ProjectsApiListChaptersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public listChapters(requestParameters: ProjectsApiListChaptersRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listChapters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the snapshots of a project.
     * @summary Get Project Snapshots
     * @param {ProjectsApiListSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public listSnapshots(requestParameters: ProjectsApiListSnapshotsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listSnapshots(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts conversion of a specific chapter.
     * @summary Convert Chapter
     * @param {ProjectsApiStartChapterConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public startChapterConversion(requestParameters: ProjectsApiStartChapterConversionRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).startChapterConversion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts conversion of a project and all of its chapters.
     * @summary Convert Project
     * @param {ProjectsApiStartConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public startConversion(requestParameters: ProjectsApiStartConversionRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).startConversion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream the audio from a project snapshot.
     * @summary Stream Project Audio
     * @param {ProjectsApiStreamAudioFromSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public streamAudioFromSnapshot(requestParameters: ProjectsApiStreamAudioFromSnapshotRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).streamAudioFromSnapshot(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
     * @summary Stream Chapter Audio
     * @param {ProjectsApiStreamAudioFromSnapshotPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public streamAudioFromSnapshotPost(requestParameters: ProjectsApiStreamAudioFromSnapshotPostRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).streamAudioFromSnapshotPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
     * @summary Update Pronunciation Dictionaries
     * @param {ProjectsApiUpdatePronunciationDictionariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updatePronunciationDictionaries(requestParameters: ProjectsApiUpdatePronunciationDictionariesRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updatePronunciationDictionaries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
