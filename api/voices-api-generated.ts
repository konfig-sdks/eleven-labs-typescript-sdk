/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddVoiceResponseModel } from '../models';
// @ts-ignore
import { BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost } from '../models';
// @ts-ignore
import { BodyAddVoiceV1VoicesAddPost } from '../models';
// @ts-ignore
import { BodyEditVoiceV1VoicesVoiceIdEditPost } from '../models';
// @ts-ignore
import { GetLibraryVoicesResponseModel } from '../models';
// @ts-ignore
import { GetVoicesResponseModel } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { VoiceResponseModel } from '../models';
// @ts-ignore
import { VoiceSettingsResponseModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VoicesApi - axios parameter creator
 * @export
 */
export const VoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a sharing voice to your collection of voices in VoiceLab.
         * @summary Add Sharing Voice
         * @param {string} publicUserId Public user ID used to publicly identify ElevenLabs users.
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost} bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollection: async (publicUserId: string, voiceId: string, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost: BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicUserId' is not null or undefined
            assertParamExists('addToCollection', 'publicUserId', publicUserId)
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('addToCollection', 'voiceId', voiceId)
            // verify required parameter 'bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost' is not null or undefined
            assertParamExists('addToCollection', 'bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost', bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost)
            const localVarPath = `/v1/voices/add/{public_user_id}/{voice_id}`
                .replace(`{${"public_user_id"}}`, encodeURIComponent(String(publicUserId !== undefined ? publicUserId : `-public_user_id-`)))
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/add/{public_user_id}/{voice_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new voice to your collection of voices in VoiceLab.
         * @summary Add Voice
         * @param {string} name The name that identifies this voice. This will be displayed in the dropdown of the website.
         * @param {Array<Uint8Array | File | buffer.File>} files One or more audio files to clone the voice from
         * @param {BodyAddVoiceV1VoicesAddPost} bodyAddVoiceV1VoicesAddPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [description] How would you describe the voice?
         * @param {string} [labels] Serialized labels dictionary for the voice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoiceToCollection: async (name: string, files: Array<Uint8Array | File | buffer.File>, bodyAddVoiceV1VoicesAddPost: BodyAddVoiceV1VoicesAddPost, xiApiKey?: string, description?: string, labels?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addVoiceToCollection', 'name', name)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('addVoiceToCollection', 'files', files)
            // verify required parameter 'bodyAddVoiceV1VoicesAddPost' is not null or undefined
            assertParamExists('addVoiceToCollection', 'bodyAddVoiceV1VoicesAddPost', bodyAddVoiceV1VoicesAddPost)
            const localVarPath = `/v1/voices/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
            if (files) {
                const baseName = 'files'
                for (const element of files) {
                    await addFormParam(baseName, element, false, false)
                }
            }

    
            if (labels !== undefined) {
                await addFormParam('labels', labels, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyAddVoiceV1VoicesAddPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a voice by its ID.
         * @summary Delete Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (voiceId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('deleteById', 'voiceId', voiceId)
            const localVarPath = `/v1/voices/{voice_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Edit Voice Settings
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {VoiceSettingsResponseModel} voiceSettingsResponseModel 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSettingsPost: async (voiceId: string, voiceSettingsResponseModel: VoiceSettingsResponseModel, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('editSettingsPost', 'voiceId', voiceId)
            // verify required parameter 'voiceSettingsResponseModel' is not null or undefined
            assertParamExists('editSettingsPost', 'voiceSettingsResponseModel', voiceSettingsResponseModel)
            const localVarPath = `/v1/voices/{voice_id}/settings/edit`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: voiceSettingsResponseModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}/settings/edit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(voiceSettingsResponseModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Default Voice Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultVoiceSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voices/settings/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/settings/default',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Voice Settings
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (voiceId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('getSettings', 'voiceId', voiceId)
            const localVarPath = `/v1/voices/{voice_id}/settings`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of shared voices.
         * @summary Get Voices
         * @param {number} [pageSize] How many shared voices to return at maximum. Can not exceed 500, defaults to 30.
         * @param {string} [category] voice category used for filtering
         * @param {string} [gender] gender used for filtering
         * @param {string} [age] age used for filtering
         * @param {string} [accent] accent used for filtering
         * @param {string} [search] search term used for filtering
         * @param {Array<string>} [useCases] use-case used for filtering
         * @param {Array<string>} [descriptives] search term used for filtering
         * @param {string} [sort] sort criteria
         * @param {boolean} [featured] Filter featured voices
         * @param {number} [page] 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedVoices: async (pageSize?: number, category?: string, gender?: string, age?: string, accent?: string, search?: string, useCases?: Array<string>, descriptives?: Array<string>, sort?: string, featured?: boolean, page?: number, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/shared-voices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (age !== undefined) {
                localVarQueryParameter['age'] = age;
            }

            if (accent !== undefined) {
                localVarQueryParameter['accent'] = accent;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (useCases) {
                localVarQueryParameter['use_cases'] = useCases;
            }

            if (descriptives) {
                localVarQueryParameter['descriptives'] = descriptives;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shared-voices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a specific voice.
         * @summary Get Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {boolean} [withSettings] If set will return settings information corresponding to the voice, requires authorization.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceMetadata: async (voiceId: string, withSettings?: boolean, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('getVoiceMetadata', 'voiceId', voiceId)
            const localVarPath = `/v1/voices/{voice_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (withSettings !== undefined) {
                localVarQueryParameter['with_settings'] = withSettings;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all available voices for a user.
         * @summary Get Voices
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllVoices: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit a voice created by you.
         * @summary Edit Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} name The name that identifies this voice. This will be displayed in the dropdown of the website.
         * @param {BodyEditVoiceV1VoicesVoiceIdEditPost} bodyEditVoiceV1VoicesVoiceIdEditPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [description] How would you describe the voice?
         * @param {Array<Uint8Array | File | buffer.File>} [files] Audio files to add to the voice
         * @param {string} [labels] Serialized labels dictionary for the voice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoiceById: async (voiceId: string, name: string, bodyEditVoiceV1VoicesVoiceIdEditPost: BodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey?: string, description?: string, files?: Array<Uint8Array | File | buffer.File>, labels?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('updateVoiceById', 'voiceId', voiceId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateVoiceById', 'name', name)
            // verify required parameter 'bodyEditVoiceV1VoicesVoiceIdEditPost' is not null or undefined
            assertParamExists('updateVoiceById', 'bodyEditVoiceV1VoicesVoiceIdEditPost', bodyEditVoiceV1VoicesVoiceIdEditPost)
            const localVarPath = `/v1/voices/{voice_id}/edit`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
            if (files) {
                const baseName = 'files'
                for (const element of files) {
                    await addFormParam(baseName, element, false, false)
                }
            }

    
            if (labels !== undefined) {
                await addFormParam('labels', labels, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyEditVoiceV1VoicesVoiceIdEditPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}/edit',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoicesApi - functional programming interface
 * @export
 */
export const VoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a sharing voice to your collection of voices in VoiceLab.
         * @summary Add Sharing Voice
         * @param {VoicesApiAddToCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCollection(requestParameters: VoicesApiAddToCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVoiceResponseModel>> {
            const bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost: BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost = {
                new_name: requestParameters.new_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCollection(requestParameters.publicUserId, requestParameters.voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new voice to your collection of voices in VoiceLab.
         * @summary Add Voice
         * @param {VoicesApiAddVoiceToCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVoiceToCollection(requestParameters: VoicesApiAddVoiceToCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVoiceResponseModel>> {
            const bodyAddVoiceV1VoicesAddPost: BodyAddVoiceV1VoicesAddPost = {
                description: requestParameters.description,
                name: requestParameters.name,
                files: requestParameters.files,
                labels: requestParameters.labels
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVoiceToCollection(requestParameters.name, requestParameters.files, bodyAddVoiceV1VoicesAddPost, requestParameters.xiApiKey, requestParameters.description, requestParameters.labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a voice by its ID.
         * @summary Delete Voice
         * @param {VoicesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: VoicesApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.voiceId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Edit Voice Settings
         * @param {VoicesApiEditSettingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editSettingsPost(requestParameters: VoicesApiEditSettingsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const voiceSettingsResponseModel: VoiceSettingsResponseModel = {
                stability: requestParameters.stability,
                similarity_boost: requestParameters.similarity_boost,
                style: requestParameters.style,
                use_speaker_boost: requestParameters.use_speaker_boost
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editSettingsPost(requestParameters.voiceId, voiceSettingsResponseModel, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Default Voice Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultVoiceSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceSettingsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultVoiceSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Voice Settings
         * @param {VoicesApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: VoicesApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceSettingsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.voiceId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of shared voices.
         * @summary Get Voices
         * @param {VoicesApiGetSharedVoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedVoices(requestParameters: VoicesApiGetSharedVoicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLibraryVoicesResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedVoices(requestParameters.pageSize, requestParameters.category, requestParameters.gender, requestParameters.age, requestParameters.accent, requestParameters.search, requestParameters.useCases, requestParameters.descriptives, requestParameters.sort, requestParameters.featured, requestParameters.page, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a specific voice.
         * @summary Get Voice
         * @param {VoicesApiGetVoiceMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoiceMetadata(requestParameters: VoicesApiGetVoiceMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoiceMetadata(requestParameters.voiceId, requestParameters.withSettings, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of all available voices for a user.
         * @summary Get Voices
         * @param {VoicesApiListAllVoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllVoices(requestParameters: VoicesApiListAllVoicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVoicesResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllVoices(requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit a voice created by you.
         * @summary Edit Voice
         * @param {VoicesApiUpdateVoiceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVoiceById(requestParameters: VoicesApiUpdateVoiceByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const bodyEditVoiceV1VoicesVoiceIdEditPost: BodyEditVoiceV1VoicesVoiceIdEditPost = {
                description: requestParameters.description,
                name: requestParameters.name,
                files: requestParameters.files,
                labels: requestParameters.labels
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoiceById(requestParameters.voiceId, requestParameters.name, bodyEditVoiceV1VoicesVoiceIdEditPost, requestParameters.xiApiKey, requestParameters.description, requestParameters.files, requestParameters.labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoicesApi - factory interface
 * @export
 */
export const VoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoicesApiFp(configuration)
    return {
        /**
         * Add a sharing voice to your collection of voices in VoiceLab.
         * @summary Add Sharing Voice
         * @param {VoicesApiAddToCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollection(requestParameters: VoicesApiAddToCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<AddVoiceResponseModel> {
            return localVarFp.addToCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new voice to your collection of voices in VoiceLab.
         * @summary Add Voice
         * @param {VoicesApiAddVoiceToCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoiceToCollection(requestParameters: VoicesApiAddVoiceToCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<AddVoiceResponseModel> {
            return localVarFp.addVoiceToCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a voice by its ID.
         * @summary Delete Voice
         * @param {VoicesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: VoicesApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Edit Voice Settings
         * @param {VoicesApiEditSettingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSettingsPost(requestParameters: VoicesApiEditSettingsPostRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.editSettingsPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Default Voice Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultVoiceSettings(options?: AxiosRequestConfig): AxiosPromise<VoiceSettingsResponseModel> {
            return localVarFp.getDefaultVoiceSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Voice Settings
         * @param {VoicesApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: VoicesApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<VoiceSettingsResponseModel> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of shared voices.
         * @summary Get Voices
         * @param {VoicesApiGetSharedVoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedVoices(requestParameters: VoicesApiGetSharedVoicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetLibraryVoicesResponseModel> {
            return localVarFp.getSharedVoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a specific voice.
         * @summary Get Voice
         * @param {VoicesApiGetVoiceMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceMetadata(requestParameters: VoicesApiGetVoiceMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<VoiceResponseModel> {
            return localVarFp.getVoiceMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all available voices for a user.
         * @summary Get Voices
         * @param {VoicesApiListAllVoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllVoices(requestParameters: VoicesApiListAllVoicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetVoicesResponseModel> {
            return localVarFp.listAllVoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit a voice created by you.
         * @summary Edit Voice
         * @param {VoicesApiUpdateVoiceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoiceById(requestParameters: VoicesApiUpdateVoiceByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateVoiceById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToCollection operation in VoicesApi.
 * @export
 * @interface VoicesApiAddToCollectionRequest
 */
export type VoicesApiAddToCollectionRequest = {
    
    /**
    * Public user ID used to publicly identify ElevenLabs users.
    * @type {string}
    * @memberof VoicesApiAddToCollection
    */
    readonly publicUserId: string
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof VoicesApiAddToCollection
    */
    readonly voiceId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiAddToCollection
    */
    readonly xiApiKey?: string
    
} & BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost

/**
 * Request parameters for addVoiceToCollection operation in VoicesApi.
 * @export
 * @interface VoicesApiAddVoiceToCollectionRequest
 */
export type VoicesApiAddVoiceToCollectionRequest = {
    
    /**
    * The name that identifies this voice. This will be displayed in the dropdown of the website.
    * @type {string}
    * @memberof VoicesApiAddVoiceToCollection
    */
    readonly name: string
    
    /**
    * One or more audio files to clone the voice from
    * @type {Array<Uint8Array | File | buffer.File>}
    * @memberof VoicesApiAddVoiceToCollection
    */
    readonly files: Array<Uint8Array | File | buffer.File>
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiAddVoiceToCollection
    */
    readonly xiApiKey?: string
    
    /**
    * How would you describe the voice?
    * @type {string}
    * @memberof VoicesApiAddVoiceToCollection
    */
    readonly description?: string
    
    /**
    * Serialized labels dictionary for the voice.
    * @type {string}
    * @memberof VoicesApiAddVoiceToCollection
    */
    readonly labels?: string
    
} & BodyAddVoiceV1VoicesAddPost

/**
 * Request parameters for deleteById operation in VoicesApi.
 * @export
 * @interface VoicesApiDeleteByIdRequest
 */
export type VoicesApiDeleteByIdRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof VoicesApiDeleteById
    */
    readonly voiceId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiDeleteById
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for editSettingsPost operation in VoicesApi.
 * @export
 * @interface VoicesApiEditSettingsPostRequest
 */
export type VoicesApiEditSettingsPostRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof VoicesApiEditSettingsPost
    */
    readonly voiceId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiEditSettingsPost
    */
    readonly xiApiKey?: string
    
} & VoiceSettingsResponseModel

/**
 * Request parameters for getSettings operation in VoicesApi.
 * @export
 * @interface VoicesApiGetSettingsRequest
 */
export type VoicesApiGetSettingsRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof VoicesApiGetSettings
    */
    readonly voiceId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiGetSettings
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getSharedVoices operation in VoicesApi.
 * @export
 * @interface VoicesApiGetSharedVoicesRequest
 */
export type VoicesApiGetSharedVoicesRequest = {
    
    /**
    * How many shared voices to return at maximum. Can not exceed 500, defaults to 30.
    * @type {number}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly pageSize?: number
    
    /**
    * voice category used for filtering
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly category?: string
    
    /**
    * gender used for filtering
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly gender?: string
    
    /**
    * age used for filtering
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly age?: string
    
    /**
    * accent used for filtering
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly accent?: string
    
    /**
    * search term used for filtering
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly search?: string
    
    /**
    * use-case used for filtering
    * @type {Array<string>}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly useCases?: Array<string>
    
    /**
    * search term used for filtering
    * @type {Array<string>}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly descriptives?: Array<string>
    
    /**
    * sort criteria
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly sort?: string
    
    /**
    * Filter featured voices
    * @type {boolean}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly featured?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly page?: number
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiGetSharedVoices
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getVoiceMetadata operation in VoicesApi.
 * @export
 * @interface VoicesApiGetVoiceMetadataRequest
 */
export type VoicesApiGetVoiceMetadataRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof VoicesApiGetVoiceMetadata
    */
    readonly voiceId: string
    
    /**
    * If set will return settings information corresponding to the voice, requires authorization.
    * @type {boolean}
    * @memberof VoicesApiGetVoiceMetadata
    */
    readonly withSettings?: boolean
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiGetVoiceMetadata
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for listAllVoices operation in VoicesApi.
 * @export
 * @interface VoicesApiListAllVoicesRequest
 */
export type VoicesApiListAllVoicesRequest = {
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiListAllVoices
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for updateVoiceById operation in VoicesApi.
 * @export
 * @interface VoicesApiUpdateVoiceByIdRequest
 */
export type VoicesApiUpdateVoiceByIdRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof VoicesApiUpdateVoiceById
    */
    readonly voiceId: string
    
    /**
    * The name that identifies this voice. This will be displayed in the dropdown of the website.
    * @type {string}
    * @memberof VoicesApiUpdateVoiceById
    */
    readonly name: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof VoicesApiUpdateVoiceById
    */
    readonly xiApiKey?: string
    
    /**
    * How would you describe the voice?
    * @type {string}
    * @memberof VoicesApiUpdateVoiceById
    */
    readonly description?: string
    
    /**
    * Audio files to add to the voice
    * @type {Array<Uint8Array | File | buffer.File>}
    * @memberof VoicesApiUpdateVoiceById
    */
    readonly files?: Array<Uint8Array | File | buffer.File>
    
    /**
    * Serialized labels dictionary for the voice.
    * @type {string}
    * @memberof VoicesApiUpdateVoiceById
    */
    readonly labels?: string
    
} & BodyEditVoiceV1VoicesVoiceIdEditPost

/**
 * VoicesApiGenerated - object-oriented interface
 * @export
 * @class VoicesApiGenerated
 * @extends {BaseAPI}
 */
export class VoicesApiGenerated extends BaseAPI {
    /**
     * Add a sharing voice to your collection of voices in VoiceLab.
     * @summary Add Sharing Voice
     * @param {VoicesApiAddToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public addToCollection(requestParameters: VoicesApiAddToCollectionRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).addToCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new voice to your collection of voices in VoiceLab.
     * @summary Add Voice
     * @param {VoicesApiAddVoiceToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public addVoiceToCollection(requestParameters: VoicesApiAddVoiceToCollectionRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).addVoiceToCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a voice by its ID.
     * @summary Delete Voice
     * @param {VoicesApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public deleteById(requestParameters: VoicesApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
     * @summary Edit Voice Settings
     * @param {VoicesApiEditSettingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public editSettingsPost(requestParameters: VoicesApiEditSettingsPostRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).editSettingsPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
     * @summary Get Default Voice Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public getDefaultVoiceSettings(options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getDefaultVoiceSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
     * @summary Get Voice Settings
     * @param {VoicesApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public getSettings(requestParameters: VoicesApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of shared voices.
     * @summary Get Voices
     * @param {VoicesApiGetSharedVoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public getSharedVoices(requestParameters: VoicesApiGetSharedVoicesRequest = {}, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getSharedVoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about a specific voice.
     * @summary Get Voice
     * @param {VoicesApiGetVoiceMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public getVoiceMetadata(requestParameters: VoicesApiGetVoiceMetadataRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getVoiceMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all available voices for a user.
     * @summary Get Voices
     * @param {VoicesApiListAllVoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public listAllVoices(requestParameters: VoicesApiListAllVoicesRequest = {}, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).listAllVoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit a voice created by you.
     * @summary Edit Voice
     * @param {VoicesApiUpdateVoiceByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApiGenerated
     */
    public updateVoiceById(requestParameters: VoicesApiUpdateVoiceByIdRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).updateVoiceById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
