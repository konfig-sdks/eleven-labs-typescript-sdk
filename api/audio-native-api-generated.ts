/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AudioNativeCreateProjectResponseModel } from '../models';
// @ts-ignore
import { BodyCreatesAudioNativeEnabledProjectV1AudioNativePost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AudioNativeApi - axios parameter creator
 * @export
 */
export const AudioNativeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates AudioNative enabled project, optionally starts conversion and returns project id and embeddable html snippet.
         * @summary Creates Audionative Enabled Project.
         * @param {string} name Project name.
         * @param {Uint8Array | File | buffer.File} file Either txt or HTML input file containing the article content. HTML should be formatted as follows \\\&#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Your content&amp;lt;/p&amp;gt;&amp;lt;h5&amp;gt;More of your content&amp;lt;/h5&amp;gt;&amp;lt;p&amp;gt;Some more of your content&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\\\&#39;
         * @param {BodyCreatesAudioNativeEnabledProjectV1AudioNativePost} bodyCreatesAudioNativeEnabledProjectV1AudioNativePost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [title] Title used in the player and inserted at the top of the uploaded article. If not provided, the default title set in the Player settings is used.
         * @param {string} [image] Image URL used in the player. If not provided, default image set in the Player settings is used.
         * @param {string} [author] Author used in the player and inserted at the start of the uploaded article. If not provided, the default author set in the Player settings is used.
         * @param {boolean} [small] Whether to use small player or not. If not provided, default value set in the Player settings is used.
         * @param {string} [textColor] Text color used in the player. If not provided, default text color set in the Player settings is used.
         * @param {string} [backgroundColor] Background color used in the player. If not provided, default background color set in the Player settings is used.
         * @param {number} [sessionization] Specifies for how many minutes to persist the session across page reloads. If not provided, default sessionization set in the Player settings is used.
         * @param {string} [voiceId] Voice ID used to voice the content. If not provided, default voice ID set in the Player settings is used.
         * @param {string} [modelId] TTS Model ID used in the player. If not provided, default model ID set in the Player settings is used.
         * @param {boolean} [autoConvert] Whether to auto convert the project to audio or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectWithEmbeddableHtml: async (name: string, file: Uint8Array | File | buffer.File, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost: BodyCreatesAudioNativeEnabledProjectV1AudioNativePost, xiApiKey?: string, title?: string, image?: string, author?: string, small?: boolean, textColor?: string, backgroundColor?: string, sessionization?: number, voiceId?: string, modelId?: string, autoConvert?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createProjectWithEmbeddableHtml', 'name', name)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createProjectWithEmbeddableHtml', 'file', file)
            // verify required parameter 'bodyCreatesAudioNativeEnabledProjectV1AudioNativePost' is not null or undefined
            assertParamExists('createProjectWithEmbeddableHtml', 'bodyCreatesAudioNativeEnabledProjectV1AudioNativePost', bodyCreatesAudioNativeEnabledProjectV1AudioNativePost)
            const localVarPath = `/v1/audio-native`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (title !== undefined) {
                await addFormParam('title', title, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (image !== undefined) {
                await addFormParam('image', image, false, true)
            }
    
            if (author !== undefined) {
                await addFormParam('author', author, false, true)
            }
    
            if (small !== undefined) {
                await addFormParam('small', small, false, true)
            }
    
            if (textColor !== undefined) {
                await addFormParam('text_color', textColor, false, true)
            }
    
            if (backgroundColor !== undefined) {
                await addFormParam('background_color', backgroundColor, false, true)
            }
    
            if (sessionization !== undefined) {
                await addFormParam('sessionization', sessionization, false, true)
            }
    
            if (voiceId !== undefined) {
                await addFormParam('voice_id', voiceId, false, true)
            }
    
            if (modelId !== undefined) {
                await addFormParam('model_id', modelId, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (autoConvert !== undefined) {
                await addFormParam('auto_convert', autoConvert, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyCreatesAudioNativeEnabledProjectV1AudioNativePost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/audio-native',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudioNativeApi - functional programming interface
 * @export
 */
export const AudioNativeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudioNativeApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates AudioNative enabled project, optionally starts conversion and returns project id and embeddable html snippet.
         * @summary Creates Audionative Enabled Project.
         * @param {AudioNativeApiCreateProjectWithEmbeddableHtmlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectWithEmbeddableHtml(requestParameters: AudioNativeApiCreateProjectWithEmbeddableHtmlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioNativeCreateProjectResponseModel>> {
            const bodyCreatesAudioNativeEnabledProjectV1AudioNativePost: BodyCreatesAudioNativeEnabledProjectV1AudioNativePost = {
                title: requestParameters.title,
                name: requestParameters.name,
                image: requestParameters.image,
                author: requestParameters.author,
                small: requestParameters.small,
                text_color: requestParameters.text_color,
                background_color: requestParameters.background_color,
                sessionization: requestParameters.sessionization,
                voice_id: requestParameters.voice_id,
                model_id: requestParameters.model_id,
                file: requestParameters.file,
                auto_convert: requestParameters.auto_convert
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectWithEmbeddableHtml(requestParameters.name, requestParameters.file, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost, requestParameters.xiApiKey, requestParameters.title, requestParameters.image, requestParameters.author, requestParameters.small, requestParameters.textColor, requestParameters.backgroundColor, requestParameters.sessionization, requestParameters.voiceId, requestParameters.modelId, requestParameters.autoConvert, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudioNativeApi - factory interface
 * @export
 */
export const AudioNativeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudioNativeApiFp(configuration)
    return {
        /**
         * Creates AudioNative enabled project, optionally starts conversion and returns project id and embeddable html snippet.
         * @summary Creates Audionative Enabled Project.
         * @param {AudioNativeApiCreateProjectWithEmbeddableHtmlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectWithEmbeddableHtml(requestParameters: AudioNativeApiCreateProjectWithEmbeddableHtmlRequest, options?: AxiosRequestConfig): AxiosPromise<AudioNativeCreateProjectResponseModel> {
            return localVarFp.createProjectWithEmbeddableHtml(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProjectWithEmbeddableHtml operation in AudioNativeApi.
 * @export
 * @interface AudioNativeApiCreateProjectWithEmbeddableHtmlRequest
 */
export type AudioNativeApiCreateProjectWithEmbeddableHtmlRequest = {
    
    /**
    * Project name.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly name: string
    
    /**
    * Either txt or HTML input file containing the article content. HTML should be formatted as follows \\\'&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;p&gt;Your content&lt;/p&gt;&lt;h5&gt;More of your content&lt;/h5&gt;&lt;p&gt;Some more of your content&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\\'
    * @type {Uint8Array | File | buffer.File}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly file: Uint8Array | File | buffer.File
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly xiApiKey?: string
    
    /**
    * Title used in the player and inserted at the top of the uploaded article. If not provided, the default title set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly title?: string
    
    /**
    * Image URL used in the player. If not provided, default image set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly image?: string
    
    /**
    * Author used in the player and inserted at the start of the uploaded article. If not provided, the default author set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly author?: string
    
    /**
    * Whether to use small player or not. If not provided, default value set in the Player settings is used.
    * @type {boolean}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly small?: boolean
    
    /**
    * Text color used in the player. If not provided, default text color set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly textColor?: string
    
    /**
    * Background color used in the player. If not provided, default background color set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly backgroundColor?: string
    
    /**
    * Specifies for how many minutes to persist the session across page reloads. If not provided, default sessionization set in the Player settings is used.
    * @type {number}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly sessionization?: number
    
    /**
    * Voice ID used to voice the content. If not provided, default voice ID set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly voiceId?: string
    
    /**
    * TTS Model ID used in the player. If not provided, default model ID set in the Player settings is used.
    * @type {string}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly modelId?: string
    
    /**
    * Whether to auto convert the project to audio or not.
    * @type {boolean}
    * @memberof AudioNativeApiCreateProjectWithEmbeddableHtml
    */
    readonly autoConvert?: boolean
    
} & BodyCreatesAudioNativeEnabledProjectV1AudioNativePost

/**
 * AudioNativeApiGenerated - object-oriented interface
 * @export
 * @class AudioNativeApiGenerated
 * @extends {BaseAPI}
 */
export class AudioNativeApiGenerated extends BaseAPI {
    /**
     * Creates AudioNative enabled project, optionally starts conversion and returns project id and embeddable html snippet.
     * @summary Creates Audionative Enabled Project.
     * @param {AudioNativeApiCreateProjectWithEmbeddableHtmlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioNativeApiGenerated
     */
    public createProjectWithEmbeddableHtml(requestParameters: AudioNativeApiCreateProjectWithEmbeddableHtmlRequest, options?: AxiosRequestConfig) {
        return AudioNativeApiFp(this.configuration).createProjectWithEmbeddableHtml(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
