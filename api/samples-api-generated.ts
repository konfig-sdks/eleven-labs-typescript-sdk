/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SamplesApi - axios parameter creator
 * @export
 */
export const SamplesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the audio corresponding to a sample attached to a voice.
         * @summary Get Audio From Sample
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} sampleId Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFromSample: async (voiceId: string, sampleId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('getAudioFromSample', 'voiceId', voiceId)
            // verify required parameter 'sampleId' is not null or undefined
            assertParamExists('getAudioFromSample', 'sampleId', sampleId)
            const localVarPath = `/v1/voices/{voice_id}/samples/{sample_id}/audio`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)))
                .replace(`{${"sample_id"}}`, encodeURIComponent(String(sampleId !== undefined ? sampleId : `-sample_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}/samples/{sample_id}/audio',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a sample by its ID.
         * @summary Delete Sample
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} sampleId Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (voiceId: string, sampleId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('removeById', 'voiceId', voiceId)
            // verify required parameter 'sampleId' is not null or undefined
            assertParamExists('removeById', 'sampleId', sampleId)
            const localVarPath = `/v1/voices/{voice_id}/samples/{sample_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId !== undefined ? voiceId : `-voice_id-`)))
                .replace(`{${"sample_id"}}`, encodeURIComponent(String(sampleId !== undefined ? sampleId : `-sample_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voices/{voice_id}/samples/{sample_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SamplesApi - functional programming interface
 * @export
 */
export const SamplesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SamplesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the audio corresponding to a sample attached to a voice.
         * @summary Get Audio From Sample
         * @param {SamplesApiGetAudioFromSampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioFromSample(requestParameters: SamplesApiGetAudioFromSampleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioFromSample(requestParameters.voiceId, requestParameters.sampleId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a sample by its ID.
         * @summary Delete Sample
         * @param {SamplesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: SamplesApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.voiceId, requestParameters.sampleId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SamplesApi - factory interface
 * @export
 */
export const SamplesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SamplesApiFp(configuration)
    return {
        /**
         * Returns the audio corresponding to a sample attached to a voice.
         * @summary Get Audio From Sample
         * @param {SamplesApiGetAudioFromSampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFromSample(requestParameters: SamplesApiGetAudioFromSampleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAudioFromSample(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a sample by its ID.
         * @summary Delete Sample
         * @param {SamplesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: SamplesApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAudioFromSample operation in SamplesApi.
 * @export
 * @interface SamplesApiGetAudioFromSampleRequest
 */
export type SamplesApiGetAudioFromSampleRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof SamplesApiGetAudioFromSample
    */
    readonly voiceId: string
    
    /**
    * Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
    * @type {string}
    * @memberof SamplesApiGetAudioFromSample
    */
    readonly sampleId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SamplesApiGetAudioFromSample
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for removeById operation in SamplesApi.
 * @export
 * @interface SamplesApiRemoveByIdRequest
 */
export type SamplesApiRemoveByIdRequest = {
    
    /**
    * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
    * @type {string}
    * @memberof SamplesApiRemoveById
    */
    readonly voiceId: string
    
    /**
    * Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
    * @type {string}
    * @memberof SamplesApiRemoveById
    */
    readonly sampleId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof SamplesApiRemoveById
    */
    readonly xiApiKey?: string
    
}

/**
 * SamplesApiGenerated - object-oriented interface
 * @export
 * @class SamplesApiGenerated
 * @extends {BaseAPI}
 */
export class SamplesApiGenerated extends BaseAPI {
    /**
     * Returns the audio corresponding to a sample attached to a voice.
     * @summary Get Audio From Sample
     * @param {SamplesApiGetAudioFromSampleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamplesApiGenerated
     */
    public getAudioFromSample(requestParameters: SamplesApiGetAudioFromSampleRequest, options?: AxiosRequestConfig) {
        return SamplesApiFp(this.configuration).getAudioFromSample(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a sample by its ID.
     * @summary Delete Sample
     * @param {SamplesApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamplesApiGenerated
     */
    public removeById(requestParameters: SamplesApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return SamplesApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
