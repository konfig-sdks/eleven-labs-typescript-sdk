/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Archive Coupon
         * @param {string} promocode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCouponPromocodePost: async (promocode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promocode' is not null or undefined
            assertParamExists('archiveCouponPromocodePost', 'promocode', promocode)
            const localVarPath = `/admin/n8enylacgd/coupon/{promocode}/archive`
                .replace(`{${"promocode"}}`, encodeURIComponent(String(promocode !== undefined ? promocode : `-promocode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/n8enylacgd/coupon/{promocode}/archive',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Vanity Link
         * @param {string} vanityLinkId 
         * @param {BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost} bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVanityLink: async (vanityLinkId: string, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost: BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vanityLinkId' is not null or undefined
            assertParamExists('editVanityLink', 'vanityLinkId', vanityLinkId)
            // verify required parameter 'bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost' is not null or undefined
            assertParamExists('editVanityLink', 'bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost', bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost)
            const localVarPath = `/admin/n8enylacgd/vanity-link/{vanity_link_id}/update`
                .replace(`{${"vanity_link_id"}}`, encodeURIComponent(String(vanityLinkId !== undefined ? vanityLinkId : `-vanity_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/n8enylacgd/vanity-link/{vanity_link_id}/update',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCoupons: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/n8enylacgd/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/n8enylacgd/coupons',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Vanity Links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVanityLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/n8enylacgd/vanity-links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/n8enylacgd/vanity-links',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Vanity Link
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVanityLink: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getVanityLink', 'slug', slug)
            const localVarPath = `/admin/n8enylacgd/vanity-link/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug !== undefined ? slug : `-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/n8enylacgd/vanity-link/{slug}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Vanity Link
         * @param {string} vanityLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVanityLink: async (vanityLinkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vanityLinkId' is not null or undefined
            assertParamExists('removeVanityLink', 'vanityLinkId', vanityLinkId)
            const localVarPath = `/admin/n8enylacgd/vanity-link/{vanity_link_id}/delete`
                .replace(`{${"vanity_link_id"}}`, encodeURIComponent(String(vanityLinkId !== undefined ? vanityLinkId : `-vanity_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/n8enylacgd/vanity-link/{vanity_link_id}/delete',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Archive Coupon
         * @param {AdminApiArchiveCouponPromocodePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveCouponPromocodePost(requestParameters: AdminApiArchiveCouponPromocodePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveCouponPromocodePost(requestParameters.promocode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit Vanity Link
         * @param {AdminApiEditVanityLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVanityLink(requestParameters: AdminApiEditVanityLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost: BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost = {
                vanity_slug: requestParameters.vanity_slug,
                target_url: requestParameters.target_url,
                comment: requestParameters.comment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editVanityLink(requestParameters.vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCoupons(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCoupons(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Vanity Links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVanityLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVanityLinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Vanity Link
         * @param {AdminApiGetVanityLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVanityLink(requestParameters: AdminApiGetVanityLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVanityLink(requestParameters.slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Vanity Link
         * @param {AdminApiRemoveVanityLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeVanityLink(requestParameters: AdminApiRemoveVanityLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeVanityLink(requestParameters.vanityLinkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Archive Coupon
         * @param {AdminApiArchiveCouponPromocodePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCouponPromocodePost(requestParameters: AdminApiArchiveCouponPromocodePostRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.archiveCouponPromocodePost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit Vanity Link
         * @param {AdminApiEditVanityLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVanityLink(requestParameters: AdminApiEditVanityLinkRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.editVanityLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCoupons(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllCoupons(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Vanity Links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVanityLinks(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllVanityLinks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Vanity Link
         * @param {AdminApiGetVanityLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVanityLink(requestParameters: AdminApiGetVanityLinkRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getVanityLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Vanity Link
         * @param {AdminApiRemoveVanityLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVanityLink(requestParameters: AdminApiRemoveVanityLinkRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeVanityLink(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveCouponPromocodePost operation in AdminApi.
 * @export
 * @interface AdminApiArchiveCouponPromocodePostRequest
 */
export type AdminApiArchiveCouponPromocodePostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiArchiveCouponPromocodePost
    */
    readonly promocode: string
    
}

/**
 * Request parameters for editVanityLink operation in AdminApi.
 * @export
 * @interface AdminApiEditVanityLinkRequest
 */
export type AdminApiEditVanityLinkRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiEditVanityLink
    */
    readonly vanityLinkId: string
    
} & BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost

/**
 * Request parameters for getVanityLink operation in AdminApi.
 * @export
 * @interface AdminApiGetVanityLinkRequest
 */
export type AdminApiGetVanityLinkRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiGetVanityLink
    */
    readonly slug: string
    
}

/**
 * Request parameters for removeVanityLink operation in AdminApi.
 * @export
 * @interface AdminApiRemoveVanityLinkRequest
 */
export type AdminApiRemoveVanityLinkRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiRemoveVanityLink
    */
    readonly vanityLinkId: string
    
}

/**
 * AdminApiGenerated - object-oriented interface
 * @export
 * @class AdminApiGenerated
 * @extends {BaseAPI}
 */
export class AdminApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Archive Coupon
     * @param {AdminApiArchiveCouponPromocodePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public archiveCouponPromocodePost(requestParameters: AdminApiArchiveCouponPromocodePostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).archiveCouponPromocodePost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit Vanity Link
     * @param {AdminApiEditVanityLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public editVanityLink(requestParameters: AdminApiEditVanityLinkRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).editVanityLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Coupons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getAllCoupons(options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAllCoupons(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Vanity Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getAllVanityLinks(options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAllVanityLinks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Vanity Link
     * @param {AdminApiGetVanityLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getVanityLink(requestParameters: AdminApiGetVanityLinkRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getVanityLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Vanity Link
     * @param {AdminApiRemoveVanityLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public removeVanityLink(requestParameters: AdminApiRemoveVanityLinkRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).removeVanityLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
