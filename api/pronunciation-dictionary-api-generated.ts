/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPronunciationDictionaryResponseModel } from '../models';
// @ts-ignore
import { BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost } from '../models';
// @ts-ignore
import { GetPronunciationDictionaryMetadataResponseModel } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PronunciationDictionaryApi - axios parameter creator
 * @export
 */
export const PronunciationDictionaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new pronunciation dictionary from a lexicon .PLS file
         * @summary Add A Pronunciation Dictionary
         * @param {string} name The name of the pronunciation dictionary, used for identification only.
         * @param {BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost} bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [description] A description of the pronunciation dictionary, used for identification only.
         * @param {Uint8Array | File | buffer.File} [file] A lexicon .pls file which we will use to initialize the project with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromFile: async (name: string, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost: BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey?: string, description?: string, file?: Uint8Array | File | buffer.File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createFromFile', 'name', name)
            // verify required parameter 'bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost' is not null or undefined
            assertParamExists('createFromFile', 'bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost', bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost)
            const localVarPath = `/v1/pronunciation-dictionaries/add-from-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/pronunciation-dictionaries/add-from-file',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata for a pronunciation dictionary
         * @summary Get Metadata For A Pronunciation Dictionary
         * @param {string} pronunciationDictionaryId The id of the pronunciation dictionary
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (pronunciationDictionaryId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pronunciationDictionaryId' is not null or undefined
            assertParamExists('getMetadata', 'pronunciationDictionaryId', pronunciationDictionaryId)
            const localVarPath = `/v1/pronunciation-dictionaries/{pronunciation_dictionary_id}`
                .replace(`{${"pronunciation_dictionary_id"}}`, encodeURIComponent(String(pronunciationDictionaryId !== undefined ? pronunciationDictionaryId : `-pronunciation_dictionary_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/pronunciation-dictionaries/{pronunciation_dictionary_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PronunciationDictionaryApi - functional programming interface
 * @export
 */
export const PronunciationDictionaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PronunciationDictionaryApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new pronunciation dictionary from a lexicon .PLS file
         * @summary Add A Pronunciation Dictionary
         * @param {PronunciationDictionaryApiCreateFromFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromFile(requestParameters: PronunciationDictionaryApiCreateFromFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPronunciationDictionaryResponseModel>> {
            const bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost: BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost = {
                description: requestParameters.description,
                file: requestParameters.file,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFromFile(requestParameters.name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, requestParameters.xiApiKey, requestParameters.description, requestParameters.file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get metadata for a pronunciation dictionary
         * @summary Get Metadata For A Pronunciation Dictionary
         * @param {PronunciationDictionaryApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(requestParameters: PronunciationDictionaryApiGetMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPronunciationDictionaryMetadataResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadata(requestParameters.pronunciationDictionaryId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PronunciationDictionaryApi - factory interface
 * @export
 */
export const PronunciationDictionaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PronunciationDictionaryApiFp(configuration)
    return {
        /**
         * Creates a new pronunciation dictionary from a lexicon .PLS file
         * @summary Add A Pronunciation Dictionary
         * @param {PronunciationDictionaryApiCreateFromFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromFile(requestParameters: PronunciationDictionaryApiCreateFromFileRequest, options?: AxiosRequestConfig): AxiosPromise<AddPronunciationDictionaryResponseModel> {
            return localVarFp.createFromFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata for a pronunciation dictionary
         * @summary Get Metadata For A Pronunciation Dictionary
         * @param {PronunciationDictionaryApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(requestParameters: PronunciationDictionaryApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<GetPronunciationDictionaryMetadataResponseModel> {
            return localVarFp.getMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFromFile operation in PronunciationDictionaryApi.
 * @export
 * @interface PronunciationDictionaryApiCreateFromFileRequest
 */
export type PronunciationDictionaryApiCreateFromFileRequest = {
    
    /**
    * The name of the pronunciation dictionary, used for identification only.
    * @type {string}
    * @memberof PronunciationDictionaryApiCreateFromFile
    */
    readonly name: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof PronunciationDictionaryApiCreateFromFile
    */
    readonly xiApiKey?: string
    
    /**
    * A description of the pronunciation dictionary, used for identification only.
    * @type {string}
    * @memberof PronunciationDictionaryApiCreateFromFile
    */
    readonly description?: string
    
    /**
    * A lexicon .pls file which we will use to initialize the project with.
    * @type {Uint8Array | File | buffer.File}
    * @memberof PronunciationDictionaryApiCreateFromFile
    */
    readonly file?: Uint8Array | File | buffer.File
    
} & BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost

/**
 * Request parameters for getMetadata operation in PronunciationDictionaryApi.
 * @export
 * @interface PronunciationDictionaryApiGetMetadataRequest
 */
export type PronunciationDictionaryApiGetMetadataRequest = {
    
    /**
    * The id of the pronunciation dictionary
    * @type {string}
    * @memberof PronunciationDictionaryApiGetMetadata
    */
    readonly pronunciationDictionaryId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof PronunciationDictionaryApiGetMetadata
    */
    readonly xiApiKey?: string
    
}

/**
 * PronunciationDictionaryApiGenerated - object-oriented interface
 * @export
 * @class PronunciationDictionaryApiGenerated
 * @extends {BaseAPI}
 */
export class PronunciationDictionaryApiGenerated extends BaseAPI {
    /**
     * Creates a new pronunciation dictionary from a lexicon .PLS file
     * @summary Add A Pronunciation Dictionary
     * @param {PronunciationDictionaryApiCreateFromFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PronunciationDictionaryApiGenerated
     */
    public createFromFile(requestParameters: PronunciationDictionaryApiCreateFromFileRequest, options?: AxiosRequestConfig) {
        return PronunciationDictionaryApiFp(this.configuration).createFromFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get metadata for a pronunciation dictionary
     * @summary Get Metadata For A Pronunciation Dictionary
     * @param {PronunciationDictionaryApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PronunciationDictionaryApiGenerated
     */
    public getMetadata(requestParameters: PronunciationDictionaryApiGetMetadataRequest, options?: AxiosRequestConfig) {
        return PronunciationDictionaryApiFp(this.configuration).getMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
