/* tslint:disable */
/* eslint-disable */
/*
ElevenLabs API Documentation

This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyDubAVideoOrAnAudioFileV1DubbingPost } from '../models';
// @ts-ignore
import { DoDubbingResponseModel } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DubbingApi - axios parameter creator
 * @export
 */
export const DubbingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a dubbing project.
         * @summary Delete Dubbing Project
         * @param {string} dubbingId ID of the dubbing project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (dubbingId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dubbingId' is not null or undefined
            assertParamExists('deleteProject', 'dubbingId', dubbingId)
            const localVarPath = `/v1/dubbing/{dubbing_id}`
                .replace(`{${"dubbing_id"}}`, encodeURIComponent(String(dubbingId !== undefined ? dubbingId : `-dubbing_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/dubbing/{dubbing_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Dubs provided audio or video file into given language.
         * @summary Dub A Video Or An Audio File
         * @param {string} targetLang Target language.
         * @param {BodyDubAVideoOrAnAudioFileV1DubbingPost} bodyDubAVideoOrAnAudioFileV1DubbingPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [mode] automatic or manual.
         * @param {Uint8Array | File | buffer.File} [file] One or more audio files to clone the voice from
         * @param {Uint8Array | File | buffer.File} [csvFile] CSV file containing transcription/translation metadata
         * @param {Uint8Array | File | buffer.File} [foregroundAudioFile] For use only with csv input
         * @param {Uint8Array | File | buffer.File} [backgroundAudioFile] For use only with csv input
         * @param {string} [name] Name of the dubbing project.
         * @param {string} [sourceUrl] URL of the source video/audio file.
         * @param {string} [sourceLang] Source language.
         * @param {number} [numSpeakers] Number of speakers to use for the dubbing.
         * @param {boolean} [watermark] Whether to apply watermark to the output video.
         * @param {number} [startTime] Start time of the source video/audio file.
         * @param {number} [endTime] End time of the source video/audio file.
         * @param {boolean} [highestResolution] Whether to use the highest resolution available.
         * @param {boolean} [dubbingStudio] Whether to prepare dub for edits in dubbing studio.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileInLanguage: async (targetLang: string, bodyDubAVideoOrAnAudioFileV1DubbingPost: BodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey?: string, mode?: string, file?: Uint8Array | File | buffer.File, csvFile?: Uint8Array | File | buffer.File, foregroundAudioFile?: Uint8Array | File | buffer.File, backgroundAudioFile?: Uint8Array | File | buffer.File, name?: string, sourceUrl?: string, sourceLang?: string, numSpeakers?: number, watermark?: boolean, startTime?: number, endTime?: number, highestResolution?: boolean, dubbingStudio?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetLang' is not null or undefined
            assertParamExists('fileInLanguage', 'targetLang', targetLang)
            // verify required parameter 'bodyDubAVideoOrAnAudioFileV1DubbingPost' is not null or undefined
            assertParamExists('fileInLanguage', 'bodyDubAVideoOrAnAudioFileV1DubbingPost', bodyDubAVideoOrAnAudioFileV1DubbingPost)
            const localVarPath = `/v1/dubbing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (mode !== undefined) {
                await addFormParam('mode', mode, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (csvFile !== undefined) {
                await addFormParam('csv_file', csvFile, true, true)
            }
    
            if (foregroundAudioFile !== undefined) {
                await addFormParam('foreground_audio_file', foregroundAudioFile, true, true)
            }
    
            if (backgroundAudioFile !== undefined) {
                await addFormParam('background_audio_file', backgroundAudioFile, true, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (sourceUrl !== undefined) {
                await addFormParam('source_url', sourceUrl, false, true)
            }
    
            if (sourceLang !== undefined) {
                await addFormParam('source_lang', sourceLang, false, true)
            }
    
            if (targetLang !== undefined) {
                await addFormParam('target_lang', targetLang, false, true)
            }
    
            if (numSpeakers !== undefined) {
                await addFormParam('num_speakers', numSpeakers, false, true)
            }
    
            if (watermark !== undefined) {
                await addFormParam('watermark', watermark, false, true)
            }
    
            if (startTime !== undefined) {
                await addFormParam('start_time', startTime, false, true)
            }
    
            if (endTime !== undefined) {
                await addFormParam('end_time', endTime, false, true)
            }
    
            if (highestResolution !== undefined) {
                await addFormParam('highest_resolution', highestResolution, false, true)
            }
    
            if (dubbingStudio !== undefined) {
                await addFormParam('dubbing_studio', dubbingStudio, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyDubAVideoOrAnAudioFileV1DubbingPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/dubbing',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns dubbed file.
         * @summary Get Dubbed File
         * @param {string} dubbingId ID of the dubbing project.
         * @param {string} languageCode ID of the language.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (dubbingId: string, languageCode: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dubbingId' is not null or undefined
            assertParamExists('getFile', 'dubbingId', dubbingId)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('getFile', 'languageCode', languageCode)
            const localVarPath = `/v1/dubbing/{dubbing_id}/audio/{language_code}`
                .replace(`{${"dubbing_id"}}`, encodeURIComponent(String(dubbingId !== undefined ? dubbingId : `-dubbing_id-`)))
                .replace(`{${"language_code"}}`, encodeURIComponent(String(languageCode !== undefined ? languageCode : `-language_code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/dubbing/{dubbing_id}/audio/{language_code}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a dubbing project, including whether it\'s still in progress or not
         * @summary Get Dubbing Project Metadata
         * @param {string} dubbingId ID of the dubbing project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMetadata: async (dubbingId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dubbingId' is not null or undefined
            assertParamExists('getProjectMetadata', 'dubbingId', dubbingId)
            const localVarPath = `/v1/dubbing/{dubbing_id}`
                .replace(`{${"dubbing_id"}}`, encodeURIComponent(String(dubbingId !== undefined ? dubbingId : `-dubbing_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/dubbing/{dubbing_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DubbingApi - functional programming interface
 * @export
 */
export const DubbingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DubbingApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a dubbing project.
         * @summary Delete Dubbing Project
         * @param {DubbingApiDeleteProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(requestParameters: DubbingApiDeleteProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(requestParameters.dubbingId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Dubs provided audio or video file into given language.
         * @summary Dub A Video Or An Audio File
         * @param {DubbingApiFileInLanguageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileInLanguage(requestParameters: DubbingApiFileInLanguageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoDubbingResponseModel>> {
            const bodyDubAVideoOrAnAudioFileV1DubbingPost: BodyDubAVideoOrAnAudioFileV1DubbingPost = {
                mode: requestParameters.mode,
                file: requestParameters.file,
                csv_file: requestParameters.csv_file,
                foreground_audio_file: requestParameters.foreground_audio_file,
                background_audio_file: requestParameters.background_audio_file,
                name: requestParameters.name,
                source_url: requestParameters.source_url,
                source_lang: requestParameters.source_lang,
                target_lang: requestParameters.target_lang,
                num_speakers: requestParameters.num_speakers,
                watermark: requestParameters.watermark,
                start_time: requestParameters.start_time,
                end_time: requestParameters.end_time,
                highest_resolution: requestParameters.highest_resolution,
                dubbing_studio: requestParameters.dubbing_studio
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileInLanguage(requestParameters.targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, requestParameters.xiApiKey, requestParameters.mode, requestParameters.file, requestParameters.csvFile, requestParameters.foregroundAudioFile, requestParameters.backgroundAudioFile, requestParameters.name, requestParameters.sourceUrl, requestParameters.sourceLang, requestParameters.numSpeakers, requestParameters.watermark, requestParameters.startTime, requestParameters.endTime, requestParameters.highestResolution, requestParameters.dubbingStudio, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns dubbed file.
         * @summary Get Dubbed File
         * @param {DubbingApiGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(requestParameters: DubbingApiGetFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(requestParameters.dubbingId, requestParameters.languageCode, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a dubbing project, including whether it\'s still in progress or not
         * @summary Get Dubbing Project Metadata
         * @param {DubbingApiGetProjectMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectMetadata(requestParameters: DubbingApiGetProjectMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectMetadata(requestParameters.dubbingId, requestParameters.xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DubbingApi - factory interface
 * @export
 */
export const DubbingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DubbingApiFp(configuration)
    return {
        /**
         * Deletes a dubbing project.
         * @summary Delete Dubbing Project
         * @param {DubbingApiDeleteProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(requestParameters: DubbingApiDeleteProjectRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Dubs provided audio or video file into given language.
         * @summary Dub A Video Or An Audio File
         * @param {DubbingApiFileInLanguageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileInLanguage(requestParameters: DubbingApiFileInLanguageRequest, options?: AxiosRequestConfig): AxiosPromise<DoDubbingResponseModel> {
            return localVarFp.fileInLanguage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns dubbed file.
         * @summary Get Dubbed File
         * @param {DubbingApiGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(requestParameters: DubbingApiGetFileRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a dubbing project, including whether it\'s still in progress or not
         * @summary Get Dubbing Project Metadata
         * @param {DubbingApiGetProjectMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMetadata(requestParameters: DubbingApiGetProjectMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getProjectMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteProject operation in DubbingApi.
 * @export
 * @interface DubbingApiDeleteProjectRequest
 */
export type DubbingApiDeleteProjectRequest = {
    
    /**
    * ID of the dubbing project.
    * @type {string}
    * @memberof DubbingApiDeleteProject
    */
    readonly dubbingId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof DubbingApiDeleteProject
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for fileInLanguage operation in DubbingApi.
 * @export
 * @interface DubbingApiFileInLanguageRequest
 */
export type DubbingApiFileInLanguageRequest = {
    
    /**
    * Target language.
    * @type {string}
    * @memberof DubbingApiFileInLanguage
    */
    readonly targetLang: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof DubbingApiFileInLanguage
    */
    readonly xiApiKey?: string
    
    /**
    * automatic or manual.
    * @type {string}
    * @memberof DubbingApiFileInLanguage
    */
    readonly mode?: string
    
    /**
    * One or more audio files to clone the voice from
    * @type {Uint8Array | File | buffer.File}
    * @memberof DubbingApiFileInLanguage
    */
    readonly file?: Uint8Array | File | buffer.File
    
    /**
    * CSV file containing transcription/translation metadata
    * @type {Uint8Array | File | buffer.File}
    * @memberof DubbingApiFileInLanguage
    */
    readonly csvFile?: Uint8Array | File | buffer.File
    
    /**
    * For use only with csv input
    * @type {Uint8Array | File | buffer.File}
    * @memberof DubbingApiFileInLanguage
    */
    readonly foregroundAudioFile?: Uint8Array | File | buffer.File
    
    /**
    * For use only with csv input
    * @type {Uint8Array | File | buffer.File}
    * @memberof DubbingApiFileInLanguage
    */
    readonly backgroundAudioFile?: Uint8Array | File | buffer.File
    
    /**
    * Name of the dubbing project.
    * @type {string}
    * @memberof DubbingApiFileInLanguage
    */
    readonly name?: string
    
    /**
    * URL of the source video/audio file.
    * @type {string}
    * @memberof DubbingApiFileInLanguage
    */
    readonly sourceUrl?: string
    
    /**
    * Source language.
    * @type {string}
    * @memberof DubbingApiFileInLanguage
    */
    readonly sourceLang?: string
    
    /**
    * Number of speakers to use for the dubbing.
    * @type {number}
    * @memberof DubbingApiFileInLanguage
    */
    readonly numSpeakers?: number
    
    /**
    * Whether to apply watermark to the output video.
    * @type {boolean}
    * @memberof DubbingApiFileInLanguage
    */
    readonly watermark?: boolean
    
    /**
    * Start time of the source video/audio file.
    * @type {number}
    * @memberof DubbingApiFileInLanguage
    */
    readonly startTime?: number
    
    /**
    * End time of the source video/audio file.
    * @type {number}
    * @memberof DubbingApiFileInLanguage
    */
    readonly endTime?: number
    
    /**
    * Whether to use the highest resolution available.
    * @type {boolean}
    * @memberof DubbingApiFileInLanguage
    */
    readonly highestResolution?: boolean
    
    /**
    * Whether to prepare dub for edits in dubbing studio.
    * @type {boolean}
    * @memberof DubbingApiFileInLanguage
    */
    readonly dubbingStudio?: boolean
    
} & BodyDubAVideoOrAnAudioFileV1DubbingPost

/**
 * Request parameters for getFile operation in DubbingApi.
 * @export
 * @interface DubbingApiGetFileRequest
 */
export type DubbingApiGetFileRequest = {
    
    /**
    * ID of the dubbing project.
    * @type {string}
    * @memberof DubbingApiGetFile
    */
    readonly dubbingId: string
    
    /**
    * ID of the language.
    * @type {string}
    * @memberof DubbingApiGetFile
    */
    readonly languageCode: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof DubbingApiGetFile
    */
    readonly xiApiKey?: string
    
}

/**
 * Request parameters for getProjectMetadata operation in DubbingApi.
 * @export
 * @interface DubbingApiGetProjectMetadataRequest
 */
export type DubbingApiGetProjectMetadataRequest = {
    
    /**
    * ID of the dubbing project.
    * @type {string}
    * @memberof DubbingApiGetProjectMetadata
    */
    readonly dubbingId: string
    
    /**
    * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \'Profile\' tab on the website.
    * @type {string}
    * @memberof DubbingApiGetProjectMetadata
    */
    readonly xiApiKey?: string
    
}

/**
 * DubbingApiGenerated - object-oriented interface
 * @export
 * @class DubbingApiGenerated
 * @extends {BaseAPI}
 */
export class DubbingApiGenerated extends BaseAPI {
    /**
     * Deletes a dubbing project.
     * @summary Delete Dubbing Project
     * @param {DubbingApiDeleteProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DubbingApiGenerated
     */
    public deleteProject(requestParameters: DubbingApiDeleteProjectRequest, options?: AxiosRequestConfig) {
        return DubbingApiFp(this.configuration).deleteProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Dubs provided audio or video file into given language.
     * @summary Dub A Video Or An Audio File
     * @param {DubbingApiFileInLanguageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DubbingApiGenerated
     */
    public fileInLanguage(requestParameters: DubbingApiFileInLanguageRequest, options?: AxiosRequestConfig) {
        return DubbingApiFp(this.configuration).fileInLanguage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns dubbed file.
     * @summary Get Dubbed File
     * @param {DubbingApiGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DubbingApiGenerated
     */
    public getFile(requestParameters: DubbingApiGetFileRequest, options?: AxiosRequestConfig) {
        return DubbingApiFp(this.configuration).getFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about a dubbing project, including whether it\'s still in progress or not
     * @summary Get Dubbing Project Metadata
     * @param {DubbingApiGetProjectMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DubbingApiGenerated
     */
    public getProjectMetadata(requestParameters: DubbingApiGetProjectMetadataRequest, options?: AxiosRequestConfig) {
        return DubbingApiFp(this.configuration).getProjectMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
